const fs = require('fs')
const path = require('path')

const themeFileName = 'theme.ts'
const supportedColors = ['primary', 'secondary', 'tertiary']

/* 
  USAGE
  node generate-theme.js --inputPath *your path* --outputPath *your path*
  node generate-theme.js -i *your path* -o *your path*
*/

const defaultVariablesPath = path.join(
  path.resolve(__dirname),
  '..',
  'src',
  'styles',
  '_colors.scss',
)

const defaultOutputPath = path.join(
  path.resolve(__dirname),
  '..',
  'src',
  themeFileName,
)

function parseArguments() {
  const args = process.argv.slice(2)
  const parsedArgs = {
    inputPath: defaultVariablesPath,
    outputPath: defaultOutputPath,
  }

  for (let i = 0; i < args.length; i += 2) {
    const flag = args[i]
    const value = args[i + 1]

    if (flag === '-i' || flag === '--inputPath') {
      parsedArgs.inputPath = value
    } else if (flag === '-o' || flag === '--outputPath') {
      parsedArgs.outputPath = path.join(path.resolve(value), themeFileName)
    }
  }

  return parsedArgs
}

function getColors(filePath) {
  const scssContent = fs.readFileSync(filePath, 'utf8')

  const cleanedScssContent = scssContent.replace(/;/g, '');

  const colorsRaw = cleanedScssContent
    .split('\n')
    .filter(el => el.startsWith('$') && !el.includes('rgb') &&
      supportedColors.some(color => el.includes(color)))
    .map(el => {
      const [key, value] = el.split(':')
      return {
        [key.replace(/\$/g, '')]: value.trim(),
      }
    })



  const colors = Object.assign({}, ...colorsRaw);

  return colors
}


function getThemeDeclaration(colors) {
  return `import { createTheme } from '@mui/material'

/* AUTOGENERATED. YOUR CHANGES MAY BE OVERWRITTEN */

const paletteOptions = {
  ${Object.entries(colors).map(([key, value]) => (
    `'${key}': {
    main: '${value}',
    contrastText: '${colors['text-primary-invert-main']}',
  }`
  )).join(',\n  ')},
}

const theme = createTheme({
  palette: paletteOptions,
})

export default theme
`
}

function saveFile(content, outputPath) {
  fs.writeFileSync(outputPath, content)

  console.log(`Theme generated and saved to: ${outputPath}`)
}

function main() {
  try {
    const { inputPath, outputPath } = parseArguments()

    const colors = getColors(inputPath)



    const themeDeclaration = getThemeDeclaration(colors)



    saveFile(themeDeclaration, outputPath)

  } catch (error) {
    console.error(error.message)
  }
}

main()